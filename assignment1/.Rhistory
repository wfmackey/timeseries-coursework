color = col1light,
parse = TRUE) +
geom_vline(xintercept = tb, linetype = "dashed", color = "grey60", size = .5) +
annotate("text",
x=1.3*tb,
y=0.8*mean(model$modelii),
label= "break in series",
color = "grey60",
parse = FALSE) +
xlab("Period") +
ylab("Measure") +
theme_minimal()
chart11
chart11 <-
model %>% ggplot(aes(x = period)) +
geom_line(aes(y = modeli), color = col1) +
geom_smooth(aes(y = modeli, group = tb),
color = col2,
method = "lm",
se = FALSE) +
annotate("text",
x=periods/10,
y=1.1*min(model$modeli),
label= "bold(Model (i))",
color = col1,
parse = TRUE) +
geom_line(aes(y = modelii), color = col1light) +
geom_smooth(aes(y = modelii, group = tb),
color = col2dark,
method = "lm",
se = FALSE) +
annotate("text",
x=periods/10,
y=0.6*max(model$modelii),
label= "bold(Model (ii))",
color = col1light,
parse = TRUE) +
geom_vline(xintercept = tb, linetype = "dashed", color = "grey60", size = .5) +
annotate("text",
x=1.25*tb,
y=0.8*mean(model$modelii),
label= "break in series",
color = "grey60",
parse = FALSE) +
xlab("Period") +
ylab("Measure") +
theme_minimal()
chart11
# Set library
library(tidyverse) # for nice data wrangling
library(lubridate) # to convert dates nicely
library(stargazer) # for (mostly) nice automated regression-output tables
library(scales)    # to nicely handle dates in ggplot
# Set library
library(tidyverse) # for nice data wrangling
library(lubridate) # to convert dates nicely
library(stargazer) # for (mostly) nice automated regression-output tables
library(scales)    # to nicely handle dates in ggplot
setwd("/Users/wfmackey/Google Drive/UniMelb/2018_2/timeseries_30004/assignment1")
col1 <- "#873B70"
col1light <- "#d8a6c9"
col2 <- "#7086BF"
col2dark <- "#374a7b"
# Generating random variables for models (i) and (ii)
set.seed(17)
periods <-  500
tb      <-  periods/2 # break is half-way through the timeframe
a0      <-  0.000
a1      <-  0.200
b0      <-  0.000
b1      <-  0.010
b2      <- -0.015
# Model (i) and (ii)
model <- as_tibble(data.frame(period = seq(1,periods,1),
u = rnorm(periods, mean = 0, sd = 0.2))) %>%
mutate(modeli   = if_else(period <= tb,
a0 + a1*0 + u,
a0 + a1*1 + u),
modelii  = if_else(period <= tb,
b0 + b1*period + b2*0 + u,
b0 + b1*period + b2*(period - tb) + u),
tb = if_else(period < tb,
FALSE, TRUE))
chart11 <-
model %>% ggplot(aes(x = period)) +
geom_line(aes(y = modeli), color = col1) +
geom_smooth(aes(y = modeli, group = tb),
color = col2,
method = "lm",
se = FALSE) +
annotate("text",
x=periods/10,
y=1.1*min(model$modeli),
label= "bold(Model (i))",
color = col1,
parse = TRUE) +
geom_line(aes(y = modelii), color = col1light) +
geom_smooth(aes(y = modelii, group = tb),
color = col2dark,
method = "lm",
se = FALSE) +
annotate("text",
x=periods/10,
y=0.6*max(model$modelii),
label= "bold(Model (ii))",
color = col1light,
parse = TRUE) +
geom_vline(xintercept = tb, linetype = "dashed", color = "grey60", size = .5) +
annotate("text",
x=1.25*tb,
y=0.8*mean(model$modelii),
label= "break in series",
color = "grey60",
parse = FALSE) +
xlab("Period") +
ylab("Measure") +
theme_minimal()
chart11
ggsave("atlas/chart11.pdf", plot = chart11, device = "pdf")
# Read data
data <- read_csv("data/asx_volume.csv") %>%
mutate(date = dmy(Dates)) %>% # Convert string-dates to dates
select(-Dates) %>%            # Drop string-dates
rename(vol = Volume) %>%      # Rename for ease-of-use
mutate(lnvol = log(vol))      # Generate log variable for volume
# Max trading day:
data %>% filter(vol == max(vol))
# It looks like the series is split before/after the max trading day.
# Let's create a dummy for before/after:
data <- data %>% mutate(after.crash = as.factor(
if_else(date > (filter(data, vol == max(vol)))$date,
"2. After peak",
"1. Before peak")))
# Create time-series chart
chart21 <- data %>%
ggplot(aes(x = date, y = lnvol)) +
geom_line(color = col1, size = 0.3) +
geom_smooth(method = "lm", color = col2, se=FALSE) +
scale_x_date(date_breaks = "2 years", labels = date_format("%Y")) +
xlab("") +
ylab("Daily log-volume traded") +
theme_light() +
theme(axis.title.y = element_text(colour = col1, family = "serif")) +
NULL
chart21
chart21.break <- data %>%
ggplot(aes(x = date, y = lnvol)) +
geom_line(color = col1light, size = 0.3) +
geom_smooth(method = "lm", color = col2dark, se=FALSE) +
scale_x_date(date_breaks = "2 years", labels = date_format("%Y")) +
xlab("") +
ylab("Daily log-volume traded") +
theme_minimal() +
theme(axis.title.y = element_text(colour = col1, family = "serif")) +
facet_grid(~ after.crash, scales = "free_x") +
NULL
chart21
chart21.break
ggsave("atlas/chart21.pdf", plot = chart21, device = "pdf")
ggsave("atlas/chart21_break.pdf", plot = chart21.break, device = "pdf")
# Creating day-of-week dummies
data.dow <- data %>%
mutate(dow = wday(date) - 1) %>% # Note that wday considers Sun=1, Mon=2, etc, which is tedious. This sets Mon=1, etc.
mutate(monday    = dow == 1,
tuesday   = dow == 2,
wednesday = dow == 3,
thursday  = dow == 4,
friday    = dow == 5
)
reg22a <- lm(lnvol ~ date*as.factor(dow),
data=data.dow)
summary(reg22a)
plot(reg22a$fitted.values)
bacf <- acf(data, plot = FALSE)
bacfdf <- with(bacf, data.frame(lag, acf))
q <- ggplot(data = bacfdf, mapping = aes(x = lag, y = acf)) +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0))
q
bacf <- acf(data, plot = FALSE)
bacf <- acf(data, plot = TRUE)
bacfdf <- with(bacf, data.frame(lag, acf))
# Plotting residuals (just looking at model a)
reg22a.resid <- bind_cols(
(as_tibble(data.dow$date)    %>% rename(date = value)),
(as_tibble(reg22a$residuals) %>% rename(resid = value))
)
reg22a.resid %>%
ggplot(aes(x = date, y = resid)) +
geom_line(color = col1, size = 0.3) +
geom_smooth(method = "lm", color = col2, se=FALSE) +
scale_x_date() +
xlab("") +
ylab("Residuals of Model (1)") +
theme_light() +
theme(axis.title.y = element_text(colour = col1)) +
NULL
# Autocorrelation tests:
acf(reg22a$residuals, lag.max=20)
pacf(reg22a$residuals, lag.max=20)
Box.test(data$lnvol, lag = 1, type = c("Box-Pierce", "Ljung-Box"), fitdf = 0)
Box.test(data$lnvol, lag = 2, type = c("Box-Pierce", "Ljung-Box"), fitdf = 0)
Box.test(data$lnvol, lag = 3, type = c("Box-Pierce", "Ljung-Box"), fitdf = 0)
stargazer(reg22a, reg22b, reg22c,
title="Results")
stargazer(reg22a,
title="Results")
# Max trading day:
data %>% filter(vol == max(vol))
chix <- "2011-10-11"
# Creating variables: TB and day-of-week dummies
data.dow <- data %>%
mutate(dow = wday(date) - 1) %>% # Note that wday considers Sun=1, Mon=2, etc, which is tedious. This sets Mon=1, etc.
mutate(monday    = dow == 1,
tuesday   = dow == 2,
wednesday = dow == 3,
thursday  = dow == 4,
friday    = dow == 5
) %>%
mutate(tb = if_else(date < chix, 0, 1))
View(data.dow)
# Creating variables: TB and day-of-week dummies
data.dow <- data %>%
mutate(dow = wday(date) - 1) %>% # Note that wday considers Sun=1, Mon=2, etc, which is tedious. This sets Mon=1, etc.
mutate(monday    = dow == 1,
tuesday   = dow == 2,
wednesday = dow == 3,
thursday  = dow == 4,
friday    = dow == 5
) %>%
mutate(tb = if_else(date < chix, FALSE, TRUE))
View(data.dow)
reg22a <- lm(lnvol ~ date      +
tb        +
monday    +
tuesday   +
wednesday +
thursday  +
friday    ,
data=data.dow)
summary(reg22a)
reg22a <- lm(lnvol ~ date      +
tb*date        +
monday    +
tuesday   +
wednesday +
thursday  +
friday    ,
data=data.dow)
summary(reg22a)
reg22a <- lm(lnvol ~
tb*date        +
monday    +
tuesday   +
wednesday +
thursday  +
friday    ,
data=data.dow)
summary(reg22a)
# Creating variables: TB and day-of-week dummies
data.dow <- data %>%
mutate(dow = wday(date) - 1) %>% # Note that wday considers Sun=1, Mon=2, etc, which is tedious. This sets Mon=1, etc.
mutate(monday    = dow == 1,
tuesday   = dow == 2,
wednesday = dow == 3,
thursday  = dow == 4,
friday    = dow == 5
) %>%
mutate(chix = as_date(chix),
tb = if_else(date < chix, FALSE, TRUE))
as_date("2011-10-31")-as_date("2011-11-12")
# The structural break of Chi-X occured Oct 31, 2011.
chix <- "2011-10-31"
# Creating variables: TB and day-of-week dummies
data.dow <- data %>%
mutate(dow = wday(date) - 1) %>% # Note that wday considers Sun=1, Mon=2, etc, which is tedious. This sets Mon=1, etc.
mutate(monday    = dow == 1,
tuesday   = dow == 2,
wednesday = dow == 3,
thursday  = dow == 4,
friday    = dow == 5
) %>%
mutate(chix = as_date(chix),
tb = if_else(date < chix, FALSE, date - chix))
# Creating variables: TB and day-of-week dummies
data.dow <- data %>%
mutate(dow = wday(date) - 1) %>% # Note that wday considers Sun=1, Mon=2, etc, which is tedious. This sets Mon=1, etc.
mutate(monday    = dow == 1,
tuesday   = dow == 2,
wednesday = dow == 3,
thursday  = dow == 4,
friday    = dow == 5
) %>%
mutate(chix = as_date(chix),
tb = if_else(date < chix, 0, date - chix))
# Creating variables: TB and day-of-week dummies
data.dow <- data %>%
mutate(dow = wday(date) - 1) %>% # Note that wday considers Sun=1, Mon=2, etc, which is tedious. This sets Mon=1, etc.
mutate(monday    = dow == 1,
tuesday   = dow == 2,
wednesday = dow == 3,
thursday  = dow == 4,
friday    = dow == 5
) %>%
mutate(chix = as_date(chix),
tb = if_else(date < chix, 0, as.numeric(date - chix)))
# Creating variables: TB and day-of-week dummies
data.dow <- data %>%
mutate(dow = wday(date) - 1) %>% # Note that wday considers Sun=1, Mon=2, etc, which is tedious. This sets Mon=1, etc.
mutate(monday    = dow == 1,
tuesday   = dow == 2,
wednesday = dow == 3,
thursday  = dow == 4,
friday    = dow == 5
) %>%
mutate(chix = as_date(chix),
tb = if_else(date < chix, 0, as.numeric(date - chix)),
period = seq(1,n(),1))
# Creating variables: TB and day-of-week dummies
data.dow <- data %>%
mutate(dow = wday(date) - 1) %>% # Note that wday considers Sun=1, Mon=2, etc, which is tedious. This sets Mon=1, etc.
mutate(monday    = dow == 1,
tuesday   = dow == 2,
wednesday = dow == 3,
thursday  = dow == 4,
friday    = dow == 5
) %>%
mutate(chix = as_date(chix),
dt = if_else(date < chix, 0, as.numeric(date - chix)),
t = seq(1,n(),1))
reg22a <- lm(lnvol ~ t         +
dt        +
monday    +
tuesday   +
wednesday +
thursday  +
friday    ,
data=data.dow)
summary(reg22a)
summary(reg22a)
plot(reg22a$fitted.values)
reg22a.resid %>%
ggplot(aes(x = date, y = resid)) +
geom_line(color = col1, size = 0.3) +
geom_smooth(method = "lm", color = col2, se=FALSE) +
scale_x_date() +
xlab("") +
ylab("Residuals of Model (1)") +
theme_light() +
theme(axis.title.y = element_text(colour = col1)) +
NULL
reg22a <- lm(lnvol ~ t         +
dt        +
monday    +
tuesday   +
wednesday +
thursday  +
friday    ,
data=data.dow)
# Plotting residuals (just looking at model a)
reg22a.resid <- bind_cols(
(as_tibble(data.dow$date)    %>% rename(date = value)),
(as_tibble(reg22a$residuals) %>% rename(resid = value))
)
reg22a.resid %>%
ggplot(aes(x = date, y = resid)) +
geom_line(color = col1, size = 0.3) +
geom_smooth(method = "lm", color = col2, se=FALSE) +
scale_x_date() +
xlab("") +
ylab("Residuals of Model (1)") +
theme_light() +
theme(axis.title.y = element_text(colour = col1)) +
NULL
# Creating variables: TB and day-of-week dummies
data.dow <- data %>%
mutate(dow = wday(date) - 1) %>% # Note that wday considers Sun=1, Mon=2, etc, which is tedious. This sets Mon=1, etc.
mutate(mon = dow == 1,
tue = dow == 2,
wed = dow == 3,
thu = dow == 4,
fri = dow == 5
) %>%
mutate(chix = as_date(chix),
dt = if_else(date < chix, 0, as.numeric(date - chix)),
t = seq(1,n(),1))
# Plotting residuals (just looking at model a)
reg22a.resid <- bind_cols(
(as_tibble(data.dow$date)    %>% rename(date = value)),
(as_tibble(data.dow$tb)      %>% rename(db   = value)),
(as_tibble(reg22a$residuals) %>% rename(resid = value))
)
# Plotting residuals (just looking at model a)
reg22a.resid <- bind_cols(
(as_tibble(data.dow$date)    %>% rename(date = value)),
(as_tibble(data.dow$dt)      %>% rename(dt = value)),
(as_tibble(reg22a$residuals) %>% rename(resid = value))
)
# Creating variables: TB and day-of-week dummies
data.dow <- data %>%
mutate(dow = wday(date) - 1) %>% # Note that wday considers Sun=1, Mon=2, etc, which is tedious. This sets Mon=1, etc.
mutate(mon = dow == 1,
tue = dow == 2,
wed = dow == 3,
thu = dow == 4,
fri = dow == 5
) %>%
mutate(chix = as_date(chix),
after.chx = if_else(date < chix, "Before Chi-X", "After Chi-X"),
dt        = if_else(date < chix, 0, as.numeric(date - chix)),
t         = seq(1,n(),1))
reg22a <- lm(lnvol ~ t   +
dt  +
mon +
tue +
wed +
thu +
fri ,
data=data.dow)
# Plotting residuals (just looking at model a)
reg22a.resid <- bind_cols(
(as_tibble(data.dow$date)    %>% rename(date = value)),
(as_tibble(data.dow$dt)      %>% rename(dt = value)),
(as_tibble(reg22a$residuals) %>% rename(resid = value))
)
reg22a.resid %>%
ggplot(aes(x = date, y = resid)) +
geom_line(aes(group = after.chx), color = col1, size = 0.3) +
geom_smooth(method = "lm", color = col2, se=FALSE) +
scale_x_date() +
xlab("") +
ylab("Residuals of Model (1)") +
theme_light() +
theme(axis.title.y = element_text(colour = col1)) +
NULL
reg22a.resid %>%
ggplot(aes(x = date, y = resid)) +
geom_line(aes(group = after.chix), color = col1, size = 0.3) +
geom_smooth(method = "lm", color = col2, se=FALSE) +
scale_x_date() +
xlab("") +
ylab("Residuals of Model (1)") +
theme_light() +
theme(axis.title.y = element_text(colour = col1)) +
NULL
# Plotting residuals (just looking at model a)
reg22a.resid <- bind_cols(
(as_tibble(data.dow$date)      %>% rename(date = value)),
(as_tibble(data.dow$dt)        %>% rename(dt = value)),
(as_tibble(data.dow$after.chx) %>% rename(after.chx = value)),
(as_tibble(reg22a$residuals)   %>% rename(resid = value))
)
reg22a.resid %>%
ggplot(aes(x = date, y = resid)) +
geom_line(aes(group = after.chix), color = col1, size = 0.3) +
geom_smooth(method = "lm", color = col2, se=FALSE) +
scale_x_date() +
xlab("") +
ylab("Residuals of Model (1)") +
theme_light() +
theme(axis.title.y = element_text(colour = col1)) +
NULL
# Plotting residuals (just looking at model a)
reg22a.resid <- bind_cols(
(as_tibble(data.dow$date)      %>% rename(date = value)),
(as_tibble(data.dow$dt)        %>% rename(dt = value)),
(as_tibble(data.dow$after.chx) %>% rename(after.chix = value)),
(as_tibble(reg22a$residuals)   %>% rename(resid = value))
)
reg22a.resid %>%
ggplot(aes(x = date, y = resid)) +
geom_line(aes(group = after.chix), color = col1, size = 0.3) +
geom_smooth(method = "lm", color = col2, se=FALSE) +
scale_x_date() +
xlab("") +
ylab("Residuals of Model (1)") +
theme_light() +
theme(axis.title.y = element_text(colour = col1)) +
NULL
reg22a.resid %>%
ggplot(aes(x = date, y = resid)) +
geom_line(aes(group = after.chix, color = after.chix), size = 0.3) +
geom_smooth(method = "lm", color = col2, se=FALSE) +
scale_x_date() +
xlab("") +
ylab("Residuals of Model (1)") +
theme_light() +
theme(axis.title.y = element_text(colour = col1)) +
NULL
reg22a.resid %>%
ggplot(aes(x = date, y = resid)) +
geom_line(color = col1, size = 0.3) +
geom_smooth(aes(group = after.chix), method = "lm", color = col2, se=FALSE) +
scale_x_date() +
xlab("") +
ylab("Residuals of Model (1)") +
theme_light() +
theme(axis.title.y = element_text(colour = col1)) +
NULL
chart21.break <- data %>%
ggplot(aes(x = date, y = lnvol)) +
geom_line(color = col1light, size = 0.3) +
geom_smooth(aes(group = after.crash), method = "lm", color = col2dark, se=FALSE) +
scale_x_date(date_breaks = "2 years", labels = date_format("%Y")) +
xlab("") +
ylab("Daily log-volume traded") +
theme_minimal() +
theme(axis.title.y = element_text(colour = col1, family = "serif")) +
# facet_grid(~ after.crash, scales = "free_x") +
NULL
chart21
chart21.break
